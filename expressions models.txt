@qgsfunction(args='auto', group='LF Tools')
def scalefactor(layer_name, feature, parent):
    """
    Calculates the Scale (Kappa) Factor based on a feature Centroid.
    <h2>Example usage:</h2>
    <ul>
      <li>scalefactor('layer_name') -> 0.99138</li>
    </ul>
    """
    if len(QgsProject.instance().mapLayersByName(layer_name)) == 1:
        layer = QgsProject.instance().mapLayersByName(layer_name)[0]
    else:
        layer = QgsProject.instance().mapLayer(layer_name)
    SRC = layer.crs()
    # Pegar centroide da
    for feat in layer.getFeatures():
        feat1 = feat
        break
    geom = feat1.geometry()
    centroide = geom.centroid().asPoint()
    # Verificar os SRC da camada
    if not SRC.isGeographic():
        # Transformar Coordenadas Projetadas do sistema UTM para geograficas
        crsDest = QgsCoordinateReferenceSystem(SRC.geographicCrsAuthId())
        coordinateTransformer = QgsCoordinateTransform()
        coordinateTransformer.setDestinationCrs(crsDest)
        coordinateTransformer.setSourceCrs(SRC)
        centroide = coordinateTransformer.transform(centroide)
    # Pegar coordenadas do Centroide
    lon = centroide.x()
    lat = centroide.y()
    return ScaleFactor(lon, lat)


@qgsfunction(args='auto', group='LF Tools')
def meridianconv(layer_name, feature, parent):
    """
    Calculates the Meridian Convergence based on a Polygon Centroid.
    <h2>Example usage:</h2>
    <ul>
      <li>meridianconv('layer_name') -> -0.3451</li>
    </ul>
    """
    if len(QgsProject.instance().mapLayersByName(layer_name)) == 1:
        layer = QgsProject.instance().mapLayersByName(layer_name)[0]
    else:
        layer = QgsProject.instance().mapLayer(layer_name)
    SRC = layer.crs()
    # Pegar centroide da
    for feat in layer.getFeatures():
        feat1 = feat
        break
    geom = feat1.geometry()
    centroide = geom.centroid().asPoint()
    # Verificar os SRC da camada
    if not SRC.isGeographic():
        # Transformar Coordenadas Projetadas do sistema UTM para geograficas
        crsDest = QgsCoordinateReferenceSystem(SRC.geographicCrsAuthId())
        coordinateTransformer = QgsCoordinateTransform()
        coordinateTransformer.setDestinationCrs(crsDest)
        coordinateTransformer.setSourceCrs(SRC)
        centroide = coordinateTransformer.transform(centroide)
    # Pegar coordenadas do Centroide
    lon = centroide.x()
    lat = centroide.y()
    return MeridianConvergence(lon, lat, SRC)